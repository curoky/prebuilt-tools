name: build darwin

on:
  push:
    branches:
      - master
  # push:
  #   paths:
  #     - ".github/workflows/build.yaml"
  #     - "pkgs/**"
  #     - "tasks/**"
  #     - "scripts/**"
  workflow_dispatch:
    inputs:
      name:
        description: "package name"
        default: ""
        required: false
        type: string
  # schedule:
  #   - cron: '0 0 - name: - name: 0'

jobs:
  build:
    runs-on: macos-latest
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - name: aria2
          - name: atuin
          - name: bat
          - name: buildifier
          - name: bzip2
          - name: connect
          - name: coreutils
          - name: eza
          - name: fd
          - name: findutils
          - name: fzf
          - name: gawk
          - name: gdu
          - name: getopt
          - name: gettext
          - name: git-absorb
          - name: git-extras
          - name: git-lfs
          - name: gnugrep
          - name: gnupatch
          - name: gnused
          - name: gnutar
          - name: go-task
          - name: gost
          - name: inetutils
          - name: lsof
          - name: m4
          - name: makeself
          - name: ncdu_1
          - name: netcat
          - name: openssl
          - name: rime-extra
          - name: ripgrep
          - name: rsync
          - name: shfmt
          - name: starship
          # - name: tmux
          - name: tmux-extra
          - name: unzip
          - name: vim
          - name: vim-extra
          - name: xz
          - name: zip
          - name: zsh-extra
          - name: zstd

          # - name: silver-searcher
          # - name: zsh

          # > meson.build:6:0: ERROR: 'objc' compiler binary not defined in cross file [binaries] section
          # - name: parallel

          # FileNotFoundError: [Errno 2] No such file or directory: 'lipo'
          # - name: wget

          # configure: error: C compiler cannot create executables
          # - name: ruff

          #  > ./Modules/ossaudiodev.c:42:10: fatal error: 'sys/soundcard.h' file not found
          # - name: python311

          # dep perl, and perl failed with ar command not found
          # - name: exiftool
          # - name: smartmontools

    steps:
      - run: echo "skip_steps=true" >> $GITHUB_ENV
      - run: echo "skip_steps=false" >> $GITHUB_ENV
        if: ${{ (github.event_name == 'workflow_dispatch' && (inputs.name == matrix.name || inputs.name == '*')) || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}

      - uses: Homebrew/actions/setup-homebrew@master
        if: ${{ env.skip_steps != 'true' }}

      - run: echo "/opt/homebrew/opt/binutils/bin" >> $GITHUB_PATH
      - run: brew install go-task binutils
        if: ${{ env.skip_steps != 'true' }}

      - uses: actions/checkout@v4
        if: ${{ env.skip_steps != 'true' }}

      - uses: actions/setup-python@v5
        if: ${{ env.skip_steps != 'true' }}
        with:
          python-version: "3"

      - uses: nixbuild/nix-quick-install-action@v30
        if: ${{ env.skip_steps != 'true' }}
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        if: ${{ env.skip_steps != 'true' }}
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-${{ matrix.name }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-${{ matrix.name }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      # - name: setup channel
      #   if: ${{ env.skip_steps != 'true' }}
      #   run: |
      #     nix-channel --add https://nixos.org/channels/nixos-24.11 nixpkgs
      #     nix-channel --update

      - run: |
          task -t tasks/common/Taskfile.yaml setup
          task -t tasks/darwin-arm64/Taskfile.yaml ${{ matrix.name }}
          ./scripts/pack.py
          ./scripts/patch.sh ${{ matrix.name }} tmp/output
          cd tmp
          mv output ${{ matrix.name }}
          tar -czvf ${{ matrix.name }}.darwin-arm64.tar.gz ${{ matrix.name }}
        if: ${{ env.skip_steps != 'true' }}

      - uses: svenstaro/upload-release-action@v2
        if: ${{ env.skip_steps != 'true' }}
        with:
          file: tmp/${{ matrix.name }}.darwin-arm64.tar.gz
          asset_name: ${{ matrix.name }}.darwin-arm64.tar.gz
          tag: "v1.0"
          overwrite: true

      - uses: fawazahmed0/action-debug-vscode@main
        if: ${{ failure() }}
        timeout-minutes: 30
